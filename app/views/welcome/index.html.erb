<html>
 <head>
 <title>Programming Practice</title>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
	 <meta charset="utf-8">
	 <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	 <style>
		 body {
		 font-family: Monospace;
		 background-color: #000000;
		 margin: 0px;
		 overflow: hidden;
		 }
		 
		 #info {
		 color: #fff;
		 position: absolute;
		 top: 10px;
		 width: 100%;
		 text-align: center;
		 z-index: 100;
		 display:block;		 
		 }
		 
		 a { color: skyblue }
	 </style> 
 </head>
 <body>
	 <div id="info">
		 <a href="http://threejs.org" target="_blank"></a>
		 <p> By: Andrew Swenson </p> <a href="welcome/notes">Click here to see how it works.</a>
	 </div>

	
	 <script>
		 
		 var peices = [["board.js",[0,0,0] , [0,0,0],0x808080],    
		 ["p1.js",[0,0,0] , [0,0,0],0x808080],		
		 ["p2.js",[0,0,0] , [0,0,0],0x808080],
		 ["p3.js",[0,0,0] , [0,0,0],0x008080],
		 ["p4.js",[0,0,0] , [0,0,0],0x808080],
		 ["p5.js",[0,0,0] , [0,0,0],0x808080],
		 ["p6.js",[0,0,0] , [0,0,0],0x808080],
		 ["p7.js",[0,0,0] , [0,0,0],0x808080],
		 ["p8.js",[0,0,0] , [0,0,0],0x808080],
		 ["p9.js",[0,0,0] , [0,0,0],0x808080],
		 ["p10.js",[0,0,0] , [0,0,0],0x808080],
		 ["p11.js",[0,0,0] , [0,0,0],0x808080],
		 ["p12.js",[0,0,0] , [0,0,0],0x808080],
		 ["p13.js",[0,0,0] , [0,0,0],0x808080],
		 ["p14.js",[0,0,0] , [0,0,0],0x808080],
		 ["p15.js",[0,0,0] , [0,0,0],0x808080],
		 ["p16.js",[0,0,0] , [0,0,0],0x808080]
		 ];
		 var wireframeTrueOrFalse = false;
		 var count = 0;
		 var container, stats;
		 var camera, controls, scene, renderer;
		 var objects = [], plane;
		 var raycaster = new THREE.Raycaster();
		 var mouse = new THREE.Vector2(),
		 offset = new THREE.Vector3(),
		 INTERSECTED, SELECTED;
		 init();
		 animate();
		 function init() {
			 container = document.createElement( 'div' );
			 document.body.appendChild( container );
			 camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );
			 camera.position.z = 1000;
			 controls = new THREE.TrackballControls( camera );
			 controls.rotateSpeed = 1.0;
			 controls.zoomSpeed = 1.2;
			 controls.panSpeed = 0.8;
			 controls.noZoom = false;
			 controls.noPan = false;
			 controls.staticMoving = true;
			 controls.dynamicDampingFactor = 0.3;
			 scene = new THREE.Scene();
			 scene.add( new THREE.AmbientLight( 0x505050 ) );
			 var light = new THREE.SpotLight( 0xffffff, 1.5 );
			 light.position.set( 0, 500, 2000 );
			 light.castShadow = true;
			 light.shadowCameraNear = 200;
			 light.shadowCameraFar = camera.far;
			 light.shadowCameraFov = 50;
			 light.shadowBias = -0.00022;
			 light.shadowMapWidth = 2048;
			 light.shadowMapHeight = 2048;
			 scene.add( light );
			 
			//load models
			 var jsonLoader = new THREE.JSONLoader();		
			 for(var i=0; i< peices.length; i++)
			 {
				jsonLoader.load( "obj//".concat(peices[i][0]), createScene );				 
			 }
			
			 function createScene( geometry, materials ) {					
				  var object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: new THREE.Color(peices[count][3]), wireframe: wireframeTrueOrFalse } ) );			
				 object.scale.set(100,100,100);
				 object.castShadow = true;
				 object.name = peices[count][0];
				 object.receiveShadow = true;
				 scene.add( object );
				 objects.push( object );
				 count++;
				 
			 }		
			 plane = new THREE.Mesh(
			 new THREE.PlaneBufferGeometry( 2000, 2000, 8, 8 ),
			 new THREE.MeshBasicMaterial( { visible: false } )
			 );
			 scene.add( plane );
			 renderer = new THREE.WebGLRenderer( { antialias: true } );
			 renderer.setClearColor( 0x000000 );
			 renderer.setPixelRatio( window.devicePixelRatio );
			 renderer.setSize( window.innerWidth, window.innerHeight );
			 renderer.sortObjects = false;
			 renderer.shadowMap.enabled = true;
			 renderer.shadowMap.type = THREE.PCFShadowMap;
			 container.appendChild( renderer.domElement );
			 var info = document.createElement( 'div' );
			 info.style.position = 'absolute';
			 info.style.top = '10px';
			 info.style.width = '100%';
			 info.style.textAlign = 'center';			
			 container.appendChild( info );
			 stats = new Stats();
			 stats.domElement.style.position = 'absolute';
			 stats.domElement.style.top = '0px';
			 container.appendChild( stats.domElement );
			 renderer.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );
			 renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );
			 renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUp, false );
			 //
			 window.addEventListener( 'resize', onWindowResize, false );
		 }
		
		 function onWindowResize() {
			 camera.aspect = window.innerWidth / window.innerHeight;
			 camera.updateProjectionMatrix();
			 renderer.setSize( window.innerWidth, window.innerHeight );
		 }
		 function onDocumentMouseMove( event ) {
			 event.preventDefault();
			 mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
			 mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
			 //
			 raycaster.setFromCamera( mouse, camera );
			 if ( SELECTED ) {
				 var intersects = raycaster.intersectObject( plane );
				 if ( intersects.length > 0 ) {
					 SELECTED.position.copy( intersects[ 0 ].point.sub( offset ) );
				 }
				 return;
			 }
			 var intersects = raycaster.intersectObjects( objects );
			 if ( intersects.length > 0 ) {
				 if ( INTERSECTED != intersects[ 0 ].object ) {
					 if ( INTERSECTED ) INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
					 INTERSECTED = intersects[ 0 ].object;
					 INTERSECTED.currentHex = INTERSECTED.material.color.getHex();
					 plane.position.copy( INTERSECTED.position );
					 plane.lookAt( camera.position );
				 }
				 container.style.cursor = 'pointer';
			 } else {
				 if ( INTERSECTED ) INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
				 INTERSECTED = null;
				 container.style.cursor = 'auto';
			 }
		 }
		 function onDocumentMouseDown( event ) {
			 event.preventDefault();
			 raycaster.setFromCamera( mouse, camera );
			 var intersects = raycaster.intersectObjects( objects );
			 if ( intersects.length > 0 ) {
				 controls.enabled = false;
				 SELECTED = intersects[ 0 ].object;
				 var intersects = raycaster.intersectObject( plane );
				 if ( intersects.length > 0 ) {
					 offset.copy( intersects[ 0 ].point ).sub( plane.position );
				 }
				 container.style.cursor = 'move';
			 }
		 }
		 function onDocumentMouseUp( event ) {
			 event.preventDefault();
			 controls.enabled = true;
			 if ( INTERSECTED ) {
				 plane.position.copy( INTERSECTED.position );
				 SELECTED = null;
			 }
			 container.style.cursor = 'auto';
		 }
		 //
		 function animate() {
			 requestAnimationFrame( animate );
			 render();
			 stats.update();
		 }
		 function render() {
			 controls.update();
			 renderer.render( scene, camera );
		 }
	 </script>
	 
	
	
 </body>
</html>
